;; load-pathを追加
(let ((default-directory (expand-file-name "~/.emacs.d/elisp")))
  (add-to-list 'load-path default-directory)
  (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
      (normal-top-level-add-subdirs-to-load-path)))

;;(defun add-to-load-path (&rest paths)
;;  (let (path)
;;    (dolist (path paths paths)
;;      (let ((default-directory (expand-file-name (concat user-emacs-directory path))))
;;        (add-to-list 'load-path default-directory)
;;        (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
;;            (normal-top-level-add-subdirs-to-load-path))))))

;;pathとconfディレクトリをサブディレクトリごとload-pathに追加
;;(add-to-load-path "elisp" "conf")

;; (install-elisp "http://www.emacswiki.org/emacs/download/auto-install.el")
(when (require 'auto-install nil t)
  ;; インストールディレクトリを設定する 初期値は ~/.emacs.d/auto-install/
  (setq auto-install-directory "~/.emacs.d/elisp/")
  ;; EmacsWikiに登録されているelispの名前を取得する (起動時にうるさいのでコメントアウト)
  ;;(auto-install-update-emacswiki-package-name t)
  ;; 必要であればプロキシの設定
  ;; (setq url-proxy-services '(("http" . "localhost:8339")))
  (auto-install-compatibility-setup))

;; elsceen(タブ)の設定
;;(require 'elscreen)
;;(global-set-key "\M-t" 'elscreen-create)
;;(global-set-key "\M-T" 'elscreen-clone)
;; not display startup message
(setq inhibit-startup-message t)

;;; C-h を backspace として使う
(keyboard-translate ?\C-h ?\C-?)
(global-set-key "\C-h" nil)

;;; M-g で指定行へジャンプ
(global-set-key "\M-g" 'goto-line)

;; タブの代わりにスペースを使う
(setq-default indent-tabs-mode nil)

;;; 選択範囲(リージョン)のハイライト
(transient-mark-mode 1)

;;; 対応する{}をハイライト
(show-paren-mode 1)

;; バックアップファイルを作成しない
(setq backup-inhibited t)
(setq make-backup-files nil)

;;(setq hl-line-face 'underline)
;;(global-hl-line-mode)

;; dispay full path
(setq frame-title-format (format "%%f - Emacs@%s" (system-name)))

;; スタートメッセージを表示しない
(setq inhibit-startup-message t)

;; メニューバーを表示しない
;;(menu-bar-mode 0)

;; C-mで改行の後、インデントする
(global-set-key "\C-m" 'newline-and-indent)

;; redo, undoの設定(redo.el) (いまいち、使えていない)
(require 'redo+)
(global-set-key (kbd "C-M-/") 'redo)
(setq undo-no-redo t)
(setq undo-limit 600000)
(setq undo-strong-limit 900000)

;; 矩形選択を簡単に
;; 行番号表示
(require 'linum)
(global-linum-mode t)

;; php mode
(autoload 'php-mode "php-mode")
(setq auto-mode-alist
      (cons '("\\.php\\'" . php-mode) auto-mode-alist))
(setq php-mode-force-pear t)
;;(add-hook 'php-mode-hook '(lambda ()
;;                            (setq c-basic-offset 4)
;;                            (setq c-tab-width 4)
;;                            (setq c-indent-level 4)
;;                            (setq tab-width 4)
;;                            (setq indent-tabs-mode t)
;;                            (setq-default tab-width 4)
;;                            ))

;; js mode
(setq js-indent-level 2)

;; テーマカラーの設定
;(when (require 'color-theme nil t)
;  (color-theme-initialize)
;  (color-theme-blippblopp))

;; 全角スペースの可視化
(defface my-face-b-1 '((t (:background "gray"))) nil)
(defface my-face-b-2 '((t (:background "snow"))) nil)
(defface my-face-u-1 '((t (:foreground "gray26" :underline t))) nil)
(defvar my-face-b-1 'my-face-b-1)
(defvar my-face-b-2 'my-face-b-2)
(defvar my-face-u-1 'my-face-u-1)

(defadvice font-lock-mode (before my-font-lock-mode ())
  (font-lock-add-keywords
   major-mode
   '(("\t" 0 my-face-b-2 append)
     ("　" 0 my-face-b-1 append)
     ("[ \t]+$" 0 my-face-u-1 append)
     )))
(ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
(ad-activate 'font-lock-mode)
